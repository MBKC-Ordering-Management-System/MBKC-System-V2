// <auto-generated />
using System;
using MBKC.Repository.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MBKC.Repository.Migrations
{
    [DbContext(typeof(MBKCDbContext))]
    [Migration("20231002025242_InitDb")]
    partial class InitDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MBKC.Repository.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.BankingAccount", b =>
                {
                    b.Property<int>("BankingAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankingAccountId"), 1L, 1);

                    b.Property<int>("KitchenCenterId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumberAccount")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BankingAccountId");

                    b.HasIndex("KitchenCenterId");

                    b.ToTable("BankingAccounts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BrandManagerEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("MBKC.Repository.Models.BrandAccount", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("BrandId", "AccountId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("BrandAccounts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Cashier", b =>
                {
                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CitizenNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("KitchenCenterId")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("KitchenCenterId");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("Cashiers");
                });

            modelBuilder.Entity("MBKC.Repository.Models.CashierMoneyExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("CashierId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("ExchangeId", "CashierId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ExchangeId")
                        .IsUnique();

                    b.ToTable("CashierMoneyExchanges");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CategoryId");

                    b.HasIndex("BrandId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MBKC.Repository.Models.ExtraCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<int>("ExtraCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ExtraCategoryId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("ExtraCategories");
                });

            modelBuilder.Entity("MBKC.Repository.Models.KitchenCenter", b =>
                {
                    b.Property<int>("KitchenCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KitchenCenterId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("KitchenCenterId");

                    b.HasIndex("ManagerId")
                        .IsUnique();

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("KitchenCenters");
                });

            modelBuilder.Entity("MBKC.Repository.Models.KitchenCenterMoneyExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("KitchenCenterId")
                        .HasColumnType("int");

                    b.HasKey("ExchangeId", "KitchenCenterId");

                    b.HasIndex("ExchangeId")
                        .IsUnique();

                    b.HasIndex("KitchenCenterId");

                    b.ToTable("KitchenCenterMoneyExchanges");
                });

            modelBuilder.Entity("MBKC.Repository.Models.MappingProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ProductId", "PartnerId", "StoreId");

                    b.HasIndex("StoreId", "PartnerId");

                    b.ToTable("MappingProducts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.MoneyExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExchangeId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExchangeType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("ReceiveId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ExchangeId");

                    b.ToTable("MoneyExchanges");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("FinalTotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("OrderPartnerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ShipperName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShipperPhone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<decimal>("SubTotalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(9,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.HasIndex("StoreId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MBKC.Repository.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("MasterOrderDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("Id");

                    b.HasIndex("MasterOrderDetailId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Partner", b =>
                {
                    b.Property<int>("PartnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PartnerId"), 1L, 1);

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("PartnerId");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<decimal>("HistoricalPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("ParentProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(false)
                        .HasColumnType("varchar(80)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "MBKC Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Brand Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            RoleName = "Kitchen Center Manager"
                        },
                        new
                        {
                            RoleId = 4,
                            RoleName = "Store Manager"
                        },
                        new
                        {
                            RoleId = 5,
                            RoleName = "Cashier"
                        });
                });

            modelBuilder.Entity("MBKC.Repository.Models.ShipperPayment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankingAccountId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("KCBankingAccountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("BankingAccountId");

                    b.HasIndex("OrderId");

                    b.ToTable("ShipperPayments");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"), 1L, 1);

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("KitchenCenterId")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RejectedReason")
                        .HasMaxLength(250)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StoreManagerEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("StoreId");

                    b.HasIndex("BrandId");

                    b.HasIndex("KitchenCenterId");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StoreAccount", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.HasKey("StoreId", "AccountId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("StoreAccounts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StoreMoneyExchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.HasKey("ExchangeId", "StoreId");

                    b.HasIndex("ExchangeId")
                        .IsUnique();

                    b.HasIndex("StoreId");

                    b.ToTable("StoreMoneyExchanges");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StorePartner", b =>
                {
                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("PartnerId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StoreId", "PartnerId");

                    b.HasIndex("PartnerId");

                    b.ToTable("StorePartners");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Transaction", b =>
                {
                    b.Property<int>("TracsactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TracsactionId"), 1L, 1);

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("TracsactionId");

                    b.HasIndex("ExchangeId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WalletId"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Account", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MBKC.Repository.Models.BankingAccount", b =>
                {
                    b.HasOne("MBKC.Repository.Models.KitchenCenter", "KitchenCenter")
                        .WithMany("BankingAccounts")
                        .HasForeignKey("KitchenCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("KitchenCenter");
                });

            modelBuilder.Entity("MBKC.Repository.Models.BrandAccount", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Account", "Account")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.BrandAccount", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Brand", "Brand")
                        .WithMany("BrandAccounts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Cashier", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.KitchenCenter", "KitchenCenter")
                        .WithMany("Cashiers")
                        .HasForeignKey("KitchenCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Wallet", "Wallet")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.Cashier", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("KitchenCenter");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MBKC.Repository.Models.CashierMoneyExchange", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Cashier", "Cashier")
                        .WithMany("CashierMoneyExchanges")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.MoneyExchange", "MoneyExchange")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.CashierMoneyExchange", "ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cashier");

                    b.Navigation("MoneyExchange");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Category", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Brand", "Brand")
                        .WithMany("Categories")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("MBKC.Repository.Models.ExtraCategory", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Category", "ExtraCategoryNavigation")
                        .WithMany("ExtraCategoryExtraCategoryNavigations")
                        .HasForeignKey("ExtraCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Category", "ProductCategory")
                        .WithMany("ExtraCategoryProductCategories")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExtraCategoryNavigation");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("MBKC.Repository.Models.KitchenCenter", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Account", "Manager")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.KitchenCenter", "ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Wallet", "Wallet")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.KitchenCenter", "WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MBKC.Repository.Models.KitchenCenterMoneyExchange", b =>
                {
                    b.HasOne("MBKC.Repository.Models.MoneyExchange", "MoneyExchange")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.KitchenCenterMoneyExchange", "ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.KitchenCenter", "KitchenCenter")
                        .WithMany("KitchenCenterMoneyExchanges")
                        .HasForeignKey("KitchenCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KitchenCenter");

                    b.Navigation("MoneyExchange");
                });

            modelBuilder.Entity("MBKC.Repository.Models.MappingProduct", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Product", "Product")
                        .WithMany("MappingProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.StorePartner", "StorePartner")
                        .WithMany("MappingProducts")
                        .HasForeignKey("StoreId", "PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StorePartner");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Order", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Partner", "Partner")
                        .WithMany("Orders")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Store", "Store")
                        .WithMany("Orders")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MBKC.Repository.Models.OrderDetail", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.OrderDetail", "MasterOrderDetail")
                        .WithMany("ExtraOrderDetails")
                        .HasForeignKey("MasterOrderDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MasterOrderDetail");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Product", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Product", "ParentProduct")
                        .WithMany("ChildrenProducts")
                        .HasForeignKey("ParentProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("ParentProduct");
                });

            modelBuilder.Entity("MBKC.Repository.Models.ShipperPayment", b =>
                {
                    b.HasOne("MBKC.Repository.Models.BankingAccount", "BankingAccount")
                        .WithMany("ShipperPayments")
                        .HasForeignKey("BankingAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Order", "Order")
                        .WithMany("ShipperPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankingAccount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Store", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Brand", "Brand")
                        .WithMany("Stores")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.KitchenCenter", "KitchenCenter")
                        .WithMany("Stores")
                        .HasForeignKey("KitchenCenterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Wallet", "Wallet")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.Store", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("KitchenCenter");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StoreAccount", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Account", "Account")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.StoreAccount", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Store", "Store")
                        .WithMany("StoreAccounts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StoreMoneyExchange", b =>
                {
                    b.HasOne("MBKC.Repository.Models.MoneyExchange", "MoneyExchange")
                        .WithOne()
                        .HasForeignKey("MBKC.Repository.Models.StoreMoneyExchange", "ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Store", "Store")
                        .WithMany("StoreMoneyExchanges")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MoneyExchange");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StorePartner", b =>
                {
                    b.HasOne("MBKC.Repository.Models.Partner", "Partner")
                        .WithMany("StorePartners")
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Store", "Store")
                        .WithMany("StorePartners")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Partner");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Transaction", b =>
                {
                    b.HasOne("MBKC.Repository.Models.MoneyExchange", "MoneyExchange")
                        .WithMany("Transactions")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.ShipperPayment", "ShipperPayment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MBKC.Repository.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MoneyExchange");

                    b.Navigation("ShipperPayment");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("MBKC.Repository.Models.BankingAccount", b =>
                {
                    b.Navigation("ShipperPayments");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Brand", b =>
                {
                    b.Navigation("BrandAccounts");

                    b.Navigation("Categories");

                    b.Navigation("Products");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Cashier", b =>
                {
                    b.Navigation("CashierMoneyExchanges");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Category", b =>
                {
                    b.Navigation("ExtraCategoryExtraCategoryNavigations");

                    b.Navigation("ExtraCategoryProductCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MBKC.Repository.Models.KitchenCenter", b =>
                {
                    b.Navigation("BankingAccounts");

                    b.Navigation("Cashiers");

                    b.Navigation("KitchenCenterMoneyExchanges");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("MBKC.Repository.Models.MoneyExchange", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ShipperPayments");
                });

            modelBuilder.Entity("MBKC.Repository.Models.OrderDetail", b =>
                {
                    b.Navigation("ExtraOrderDetails");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Partner", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("StorePartners");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Product", b =>
                {
                    b.Navigation("ChildrenProducts");

                    b.Navigation("MappingProducts");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.ShipperPayment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Store", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("StoreAccounts");

                    b.Navigation("StoreMoneyExchanges");

                    b.Navigation("StorePartners");
                });

            modelBuilder.Entity("MBKC.Repository.Models.StorePartner", b =>
                {
                    b.Navigation("MappingProducts");
                });

            modelBuilder.Entity("MBKC.Repository.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
